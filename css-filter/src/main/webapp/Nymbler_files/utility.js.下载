

// getBaseId: parses through the input id to find g_name where g = gender (m or f)
function getBaseId(currId) {
	if (currId) {
		var currIdSplit = currId.split('_');
		var baseId;		
		switch(currIdSplit.length) {
			case 2: baseId = currId;
				break;				
			case 3: baseId = currIdSplit[1] + '_' + currIdSplit[2];
				break;			
			case 4: baseId = currIdSplit[2] + '_' + currIdSplit[3];
				break;
		}
		return baseId;
	}	
}

// extend the element class so that you can more easily append FX
Element.extend({    
    effect: function(property, options){
        return new Fx.Style(this, property, options);
    }
});

// loop through parent elements until you find a particular tag
function getParentByTag(child,tag) {
	if (child && tag) {
		var p = child.getParent();
		do { p = p.getParent(); }
		while (p.getTag() != tag);
		return p;
	}
}

/*NEW CLEANUP FOR NUMBERING... if needed
function checkItemCleanup() {
	var inspInputs = $ES('input.likeCheck');
	var j = 0;
	for(i=0;i<inspInputs.length; i++){
		var thisInput = inspInputs[i];
		if(thisInput.checked){
			thisInput.name += j;
			alert(thisInput.name);
			j++;
		}
	}
	var favInputs = $ES('input.likeCheck');
	var j = 0;
	for(i=0;i<inspInputs.length; i++){
		var thisInput = inspInputs[i];
		if(thisInput.checked){
			thisInput.name += j;
			alert(thisInput.name);
			j++;
		}
	}
}

function checkItems() {
	checkItemCleanup();
	var allInputs = $$('input');
	var allChecked = new Array();	
	allInputs.each(function(input){
		if (input.checked == true) {			
			allChecked.extend([input.name]);
		}
	});	
	return allChecked;
}
*/

// add the CSS class to the object
function addNewClass(obj, className){
	var myClass = ' '+className;
	var myElement = obj;
	if (!/\b myClass t\b/.exec(myElement.className)) {
		myElement.className+=myElement.className? myClass :myClass ;
	}
}

// array shuffle function
function shuffle( myArray ) {
  var i = myArray.length;
  if ( i == 0 ) return false;
  while ( --i ) {
     var j = Math.floor( Math.random() * ( i + 1 ) );
     var tempi = myArray[i];
     var tempj = myArray[j];
     myArray[i] = tempj;
     myArray[j] = tempi;
   }
}

// get the browser width
function getScreenWidth(){
	var x;
	
	// all except Explorer
	if (self.innerHeight){
		x = self.innerWidth;
	}
	// Explorer 6 Strict Mode
	else if (document.documentElement && document.documentElement.clientHeight){
		x = document.documentElement.clientWidth;
	}
	// other Explorers
	else if (document.body){
		x = document.body.clientWidth;
	}
	return x;
}

// get the browser height
function getScreenHeight(){
	var y;
	
	// all except Explorer
	if (self.innerHeight){
		y = self.innerHeight;
	}
	// Explorer 6 Strict Mode
	else if (document.documentElement && document.documentElement.clientHeight){
		y = document.documentElement.clientHeight;
	}
	// other Explorers
	else if (document.body){
		y = document.body.clientHeight;
	}
	return y;
}

function positionPopup(popup, offset) {
	if (popup) {
		var st = getScrollTop();		
		popup.setStyle('top', (st + offset) + 'px');	
		popup.setStyle('display', 'block');
		var semiLayer = $('popupScreen');
		if (semiLayer) { showPopupScreen(); }
	}
}

function showPopupScreen() {
	var semiLayer = $('popupScreen');
	if (semiLayer) {
		var sh = window.getScrollHeight();
		semiLayer.setStyle('width','100%');
		semiLayer.setStyle('height',(sh+80) + 'px');
	}
}

// email validation
function checkmail(e){
	var emailfilter = /^\w+[\+\.\w-]*@([\w-]+\.)*\w+[\w-]*\.([a-z]{2,4}|\d+)$/i;
	var returnval = emailfilter.test(e);
	return returnval;
}